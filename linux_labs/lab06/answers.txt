--------------------------------------------------------------------------------
    LAB 06                                                       GDB & DEBUGGING
--------------------------------------------------------------------------------

    Answer all questions for Lab06 in this file. Questions or tasks which
    require you to edit another file have the name of the file already
    entered for you.

--------------------------------------------------------------------------------
    QUESTIONS
--------------------------------------------------------------------------------

------------------
    QUESTION 1
------------------

A) To compile the code which adds support for debugging we need to add a -g flag.

B) Segmentation fault (core dumped). To run the debugger and load the program,

we need to write "gdb --tui myprog" to see the graphical user interface or just

"gdb myprog" and then list the lines to see the code.

C) To set a breakpoint at the beginning of the code, we use break and either

line number or a function name, I used "break main". When I run the code

I receive:

Breakpoint 1, main () at main.c:6
6	int main(void) {

D) B+>â”‚6       int main(void)

E) To continue running the program I would type "continue".

F) The program received signal SIGSEGV, segmentation fault in generateRandomData.

It occurred in util.c in line 10.

G) To print the contents of the variable dataptr we need to type in "print dataptr".

The content of the variable is the following: $1 = (int *) 0x0.

H) To print out the contents of the memory location dataptr points to, I would use

"print *dataptr". The following error message appears:

Cannot access memory at address 0x0

Since the memory address we are actually pointing to is set to NULL, which is not

accessible

I) The error obtained is the same as the one when using NULL instead of data

(segmentation fault core dumbed), however the difference is that data tries to

display i decreasingly starting from 0, trying to access elements of the array

but the negative positions do not exist, resulting in an infinite loop and

therefore a segmentation fault.

J) I would try to set the breakpoint after line 10 and somewhere before the for loop.

That would allow me to access the for loop with next and see how the i variable

behaves.

K) The i variable tries to access the elements in the array starting with 0, then

it somehow continues in decreasing order, which should not be the case.

$1 = {46, 62, 63, 33, 22, 81, 37, 93, 82, 63}

L) watch i

M) The code does not print the generated numbers from the array, it turns out i

decreases.

N) The for loop never stops and random numbers from the memory are printed.

O) Instead of "for (i=0; i<SIZE_OF_DATA; i--)" { in main.c line 13 , the

corrected version should be "for (i=0; i<SIZE_OF_DATA; i++){".
